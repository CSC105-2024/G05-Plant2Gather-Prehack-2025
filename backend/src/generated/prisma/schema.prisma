// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }
enum PlantStatus {
  ALIVE
  DEAD
}

model User {
  id        Int      @id @default(autoincrement())
  firstname String
  lastname  String
  email     String   @unique
  username  String   @unique
  password  String
  user_img  String // Prisma doesn't have a 'url' type, use String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plants        Plant[]
  posts         Post[]
  subscriptions Subscription[]
  daystreaks    DayStreak[]
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  endpoint  String   @unique
  keys      Json
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Plant {
  id             Int         @id @default(autoincrement())
  plant_name     String
  plant_nickname String
  time_reminder  DateTime
  plant_img      String
  status         PlantStatus
  userId         Int

  last_notified_at DateTime? // <-- New: When the last notification was sent
  createdAt        DateTime  @default(now()) // <-- New: Created timestamp
  updatedAt        DateTime  @updatedAt // <-- New: Auto-updated on change

  user       User        @relation(fields: [userId], references: [id])
  posts      Post[]
  daystreaks DayStreak[]
}

model Post {
  id        Int      @id @default(autoincrement())
  userId    Int
  plantId   Int
  status    Boolean
  createdAt DateTime @default(now()) // <-- New: Created timestamp
  updatedAt DateTime @updatedAt // <-- New: Auto-updated on change

  user  User  @relation(fields: [userId], references: [id])
  plant Plant @relation(fields: [plantId], references: [id])
}

model DayStreak {
  id        Int      @id @default(autoincrement())
  userId    Int
  plantId   Int
  streak    Int
  createdAt DateTime @default(now()) // <-- New: Created timestamp
  updatedAt DateTime @updatedAt // <-- New: Auto-updated on change

  user  User  @relation(fields: [userId], references: [id])
  plant Plant @relation(fields: [plantId], references: [id])
}
